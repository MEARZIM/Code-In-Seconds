// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Prisma Schema for Account
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum UserRole {
  ADMIN
  USER
}

// Prisma Schema for User
model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  // username              String?                @unique
  bio                   String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  accounts              Account[]
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  coverImage            String?
  profileImage          String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  followingIds          String[]               @db.ObjectId
  hasNotifications      Boolean?

  post         Post[]
  comments     Comment[]
  notification Notification[]
  tutorial     Tutorial[]

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userID String @db.ObjectId
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@unique([userID])
}

model Category {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  slug             String     @unique
  title            String
  titleDescription String?
  description      String?
  img              String?
  Posts            Post[]
  tutorial         Tutorial[]
}

model Post {
  id         String    @id @default(cuid()) @map("_id")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  slug       String    @unique
  title      String
  desc       String
  img        String?
  views      Int       @default(0)
  catSlug    String
  cat        Category  @relation(fields: [catSlug], references: [slug])
  userId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likedIds   String[]  @db.ObjectId
  likesCount Int       @default(0)
  comments   Comment[]
  // postCategory PostCategory[] // Adding the opposite relation field
}

// model PostCategory {
//   id         String @id @default(auto()) @map("_id") @db.ObjectId
//   postId     String @db.ObjectId
//   categoryId String @db.ObjectId

//   post     Post       @relation(fields: [postId], references: [id])
//   category Categories @relation(fields: [categoryId], references: [id])
// }

// Tutorial Post (A tutorial can be a Blog But a every blog Cann't be a Blog)
model Tutorial {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  slug      String   @unique
  title     String
  desc      String
  img       String?
  views     Int      @default(0)
  catSlug   String
  cat       Category @relation(fields: [catSlug], references: [slug])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc      String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
